{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": true
  },
  "plugins": ["@typescript-eslint"],
  "ignorePatterns": [
    "projects/**/*",
    "**/charting-library/*",
    "**/charting_library/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "ats",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "ats",
            "style": "kebab-case"
          }
        ],
        "@typescript-eslint/semi": "warn",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/ban-types": "error",
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "error",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "comma",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": [
              "class",
              "interface",
              "typeAlias",
              "typeParameter"
            ],
            "format": [
              "PascalCase"
            ]
          },
          {
            "selector": [
              "classMethod",
              "function",
              "parameter",
              "typeMethod"
            ],
            "format": [
              "camelCase"
            ]
          },
          {
            "selector": [
              "variable",
              "classProperty"
            ],
            "format": [
              "camelCase",
              "UPPER_CASE",
              "PascalCase"
            ]
          },
          {
            "selector": [
              "typeProperty"
            ],
            "leadingUnderscore": "allow",
            "format": [
              "camelCase",
              "PascalCase",
              "snake_case"
            ]
          }
        ],
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-duplicate-type-constituents": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": [
          "error",
          {
            "allow": [
              "arrowFunctions"
            ]
          }
        ],
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-extraneous-class": [
          "error",
          {
            "allowStaticOnly": true,
            "allowEmpty": true
          }
        ],
        "@typescript-eslint/no-inferrable-types": "error",
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-mixed-enums": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-enum-comparison": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": "error",
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/strict-boolean-expressions": [
          "error",
          {
            "allowAny": true
          }
        ],
        "@typescript-eslint/switch-exhaustiveness-check": "error"
      }
    },
    {
      "files": [
        "*.spec.ts"
      ],
      "extends": [
        "plugin:@angular-eslint/recommended"
      ],
      "rules": {
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-magic-numbers": "off",
        "@typescript-eslint/no-unsafe-assignment": "off"
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]
}
